# Generated by Django 5.2.5 on 2025-09-01 13:48

import core.models.user
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('university', models.CharField(help_text='Name of the university/institution', max_length=200)),
                ('student_id', models.CharField(blank=True, help_text='Student ID number', max_length=50, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture', null=True, upload_to='profile_pictures/')),
                ('bio', models.TextField(blank=True, help_text='Brief description about yourself', max_length=500, null=True)),
                ('verification_status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('rejected', 'Rejected')], default='pending', help_text='Email verification status', max_length=10)),
                ('email_verified', models.BooleanField(default=False, help_text='Whether email has been verified')),
                ('campus_location', models.CharField(blank=True, help_text='Campus or preferred meeting location', max_length=200, null=True)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, help_text='Average rating from buyers/sellers', max_digits=3)),
                ('total_ratings', models.PositiveIntegerField(default=0, help_text='Total number of ratings received')),
                ('total_sales', models.PositiveIntegerField(default=0, help_text='Total number of successful sales')),
                ('total_purchases', models.PositiveIntegerField(default=0, help_text='Total number of purchases made')),
                ('is_banned', models.BooleanField(default=False, help_text='Whether user is banned from the platform')),
                ('ban_reason', models.TextField(blank=True, help_text='Reason for ban if applicable', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Student User',
                'verbose_name_plural': 'Student Users',
                'db_table': 'student_users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', core.models.user.StudentUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Conversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, help_text='Optional conversation title', max_length=200, null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether conversation is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_message_at', models.DateTimeField(blank=True, help_text='Timestamp of last message', null=True)),
                ('participants', models.ManyToManyField(help_text='Users participating in this conversation', related_name='conversations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conversation',
                'verbose_name_plural': 'Conversations',
                'db_table': 'conversations',
                'ordering': ['-last_message_at', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('text', 'Text Message'), ('image', 'Image'), ('system', 'System Message'), ('product_inquiry', 'Product Inquiry'), ('price_offer', 'Price Offer'), ('meeting_request', 'Meeting Request')], default='text', max_length=20)),
                ('content', models.TextField(help_text='Message content', max_length=2000)),
                ('image', models.ImageField(blank=True, help_text='Optional image attachment', null=True, upload_to='chat_images/')),
                ('metadata', models.JSONField(blank=True, help_text='Additional structured data for special message types', null=True)),
                ('is_read', models.BooleanField(default=False, help_text='Whether message has been read by recipient')),
                ('is_edited', models.BooleanField(default=False, help_text='Whether message has been edited')),
                ('is_deleted', models.BooleanField(default=False, help_text='Whether message has been deleted (soft delete)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('read_at', models.DateTimeField(blank=True, help_text='When message was read', null=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='core.conversation')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Message',
                'verbose_name_plural': 'Messages',
                'db_table': 'messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='File attachment', upload_to='chat_attachments/')),
                ('file_name', models.CharField(help_text='Original filename', max_length=255)),
                ('file_size', models.PositiveIntegerField(help_text='File size in bytes')),
                ('file_type', models.CharField(help_text='MIME type of the file', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='core.message')),
            ],
            options={
                'verbose_name': 'Message Attachment',
                'verbose_name_plural': 'Message Attachments',
                'db_table': 'message_attachments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Product title/name', max_length=200)),
                ('description', models.TextField(help_text='Detailed product description', max_length=2000)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in local currency (ZAR)', max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('original_price', models.DecimalField(blank=True, decimal_places=2, help_text='Original price (optional, for showing discounts)', max_digits=10, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('condition', models.CharField(choices=[('new', 'Brand New'), ('like_new', 'Like New'), ('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], default='good', max_length=20)),
                ('pickup_location', models.CharField(help_text='Preferred pickup/meeting location', max_length=200)),
                ('campus_area', models.CharField(blank=True, help_text='Specific campus area for pickup', max_length=100, null=True)),
                ('is_negotiable', models.BooleanField(default=True, help_text='Whether price is negotiable')),
                ('pickup_only', models.BooleanField(default=True, help_text='Pickup only or delivery available')),
                ('delivery_fee', models.DecimalField(blank=True, decimal_places=2, help_text='Delivery fee if applicable', max_digits=8, null=True, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('status', models.CharField(choices=[('active', 'Active'), ('sold', 'Sold'), ('reserved', 'Reserved'), ('inactive', 'Inactive'), ('flagged', 'Flagged')], default='active', max_length=20)),
                ('view_count', models.PositiveIntegerField(default=0, help_text='Number of times viewed')),
                ('favorite_count', models.PositiveIntegerField(default=0, help_text='Number of users who favorited')),
                ('inquiry_count', models.PositiveIntegerField(default=0, help_text='Number of inquiries received')),
                ('is_featured', models.BooleanField(default=False, help_text='Featured product (shown prominently)')),
                ('is_urgent', models.BooleanField(default=False, help_text='Urgent sale (seller needs to sell quickly)')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When the listing expires', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags for better searchability', max_length=500, null=True)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
                'db_table': 'products',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='conversation',
            name='related_product',
            field=models.ForeignKey(blank=True, help_text='Product this conversation is about', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='conversations', to='core.product'),
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Category name', max_length=100, unique=True)),
                ('slug', models.SlugField(help_text='URL-friendly category name', unique=True)),
                ('description', models.TextField(blank=True, help_text='Category description', max_length=300, null=True)),
                ('icon', models.CharField(blank=True, help_text='Icon class name for frontend', max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subcategories', to='core.productcategory')),
            ],
            options={
                'verbose_name': 'Product Category',
                'verbose_name_plural': 'Product Categories',
                'db_table': 'product_categories',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to='core.productcategory'),
        ),
        migrations.CreateModel(
            name='ProductFavorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='core.product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Product Favorite',
                'verbose_name_plural': 'Product Favorites',
                'db_table': 'product_favorites',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Product image', upload_to='product_images/')),
                ('alt_text', models.CharField(blank=True, help_text='Alternative text for accessibility', max_length=200, null=True)),
                ('is_primary', models.BooleanField(default=False, help_text='Main product image')),
                ('order', models.PositiveSmallIntegerField(default=0, help_text='Display order')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='core.product')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'db_table': 'product_images',
                'ordering': ['-is_primary', 'order'],
            },
        ),
        migrations.CreateModel(
            name='UserRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)], help_text='Rating from 1 to 5 stars')),
                ('comment', models.TextField(blank=True, help_text='Optional comment about the transaction', max_length=500, null=True)),
                ('transaction_type', models.CharField(choices=[('sale', 'Sale'), ('purchase', 'Purchase'), ('general', 'General Interaction')], default='general', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('rated_user', models.ForeignKey(help_text='User being rated', on_delete=django.db.models.deletion.CASCADE, related_name='received_ratings', to=settings.AUTH_USER_MODEL)),
                ('rater', models.ForeignKey(help_text='User giving the rating', on_delete=django.db.models.deletion.CASCADE, related_name='given_ratings', to=settings.AUTH_USER_MODEL)),
                ('related_product', models.ForeignKey(blank=True, help_text='Product related to this rating', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.product')),
            ],
            options={
                'verbose_name': 'User Rating',
                'verbose_name_plural': 'User Ratings',
                'db_table': 'user_ratings',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ConversationParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_muted', models.BooleanField(default=False, help_text='Whether user has muted this conversation')),
                ('is_archived', models.BooleanField(default=False, help_text='Whether user has archived this conversation')),
                ('is_blocked', models.BooleanField(default=False, help_text='Whether user has blocked the other participant')),
                ('last_read_at', models.DateTimeField(blank=True, help_text='When user last read messages in this conversation', null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('conversation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participant_settings', to='core.conversation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conversation_settings', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Conversation Participant',
                'verbose_name_plural': 'Conversation Participants',
                'db_table': 'conversation_participants',
                'ordering': ['joined_at'],
                'unique_together': {('conversation', 'user')},
            },
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['conversation', 'created_at'], name='messages_convers_3ebb41_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sender'], name='messages_sender__6ae55a_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['is_read'], name='messages_is_read_6a69c0_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['created_at'], name='messages_created_919c58_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['related_product'], name='conversatio_related_0aa4e0_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['last_message_at'], name='conversatio_last_me_594294_idx'),
        ),
        migrations.AddIndex(
            model_name='conversation',
            index=models.Index(fields=['created_at'], name='conversatio_created_694913_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['status', 'category'], name='products_status_3f4ce6_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['seller', 'status'], name='products_seller__87e71e_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['created_at'], name='products_created_e1ba5f_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['price'], name='products_price_fe467e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productfavorite',
            unique_together={('user', 'product')},
        ),
        migrations.AddIndex(
            model_name='productimage',
            index=models.Index(fields=['product', 'is_primary'], name='product_ima_product_c8c86a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrating',
            unique_together={('rated_user', 'rater', 'related_product')},
        ),
    ]
